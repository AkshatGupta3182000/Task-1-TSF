#TASK 1 TSF PREDICTION USING SUPERVISED MACHINE LEARNING
#PERFORMED BY AKSHAT GUPTA (AN INTERN IN DATA SCIENCE AND BUSINESS ANALYST AT THE SPARKS FOUNDATION)

#This Task focuses on predicting scores of students based on no of hours for which they have studied.For the Prediction we will use the Linear Regression model

DATA source=http://bit.ly/w-data

#At first we will import all the libraries that we are going to need for this task

import pandas as pd
import matplotlib.pyplot as plt
from sklearn import linear_model
#Now we are going to call our data

url="http://bit.ly/w-data"
data=pd.read_csv(url)
print(data)
    Hours  Scores
0     2.5      21
1     5.1      47
2     3.2      27
3     8.5      75
4     3.5      30
5     1.5      20
6     9.2      88
7     5.5      60
8     8.3      81
9     2.7      25
10    7.7      85
11    5.9      62
12    4.5      41
13    3.3      42
14    1.1      17
15    8.9      95
16    2.5      30
17    1.9      24
18    6.1      67
19    7.4      69
20    2.7      30
21    4.8      54
22    3.8      35
23    6.9      76
24    7.8      86
#we will use some basic functions to get a better idea of our data

data.head()
Hours	Scores
0	2.5	21
1	5.1	47
2	3.2	27
3	8.5	75
4	3.5	30

data.describe()
Hours	Scores
count	25.000000	25.000000
mean	5.012000	51.480000
std	2.525094	25.286887
min	1.100000	17.000000
25%	2.700000	30.000000
50%	4.800000	47.000000
75%	7.400000	75.000000
max	9.200000	95.000000

data.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 25 entries, 0 to 24
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   Hours   25 non-null     float64
 1   Scores  25 non-null     int64  
dtypes: float64(1), int64(1)
memory usage: 464.0 bytes
data.corr()
Hours	Scores
Hours	1.000000	0.976191
Scores	0.976191	1.000000

#From the above code you can see that hours and scores are strongly correlated so now we will take a look at the graph of these two variables to get more idea

plt.title("no of hours studied Vs score obtained")
plt.xlabel("no of hours studied")
plt.ylabel("scores obtained")
plt.scatter(data.Hours,data.Scores,color="green")
<matplotlib.collections.PathCollection at 0x4d298f8>

#now we will train our dataset

from sklearn.linear_model import LinearRegression
l=linear_model.LinearRegression()
l.fit(data[['Hours']],data.Scores)
LinearRegression()

#now we will use the equation of linear regression y=mx+c where m=slope c=y-intercept

a=l.intercept_
print(a)
2.483673405373203
m=l.coef_
print(m)
[9.77580339]

#putting all these values in the equation we will get linear equation as y=9.7758x+2.48367

#here pdscore means predicted score

pdscore = data[['Hours']]*m + a
plt.title("no of hours studied Vs score obtained")
plt.xlabel("no of hours studied")
plt.ylabel("scores obtained")
plt.scatter(data.Hours,data.Scores,color="green")
plt.plot(data.Hours,pdscore,color="red")
[<matplotlib.lines.Line2D at 0x96f2b98>]

#in the above graph we can see that mostly the points are very much close to the line so it shows strong correlation between the two variables

#Now we will test our model

def predicted_score(Hours):
    score=m*Hours+a
    return score

#now we will answer the problem in our task related to prediction What will be predicted score if a student studies for 9.25 hrs/ day?

marks=predicted_score(9.25)
print("if a student studies for 9.25 hours a day he will get marks=",marks)

#if a student studies for 9.25 hours a day he will get marks= [92.90985477]

from sklearn.metrics import mean_absolute_error
error=mean_absolute_error(data.Scores,pdscore)
print(error)
4.972805319866374

#as we can see from the above code that error in our model is 4.97 which is very less so we can say that our model is reliable for prediction

